/*
Create a class Account that stores customer name, account number, and type of
account. From this device the classes Curr-acct and Sav-acct to make them more
specific to their requirements. Include the necessary methods in order to achieve the
following tasks.
ï‚· Accept deposit from a customer and update the balance
ï‚· Display the balance
ï‚· Compute and deposit interest
ï‚· Permit withdrawal and update the balance
ï‚· Check for the minimum balance, impose penalty, if necessary and update the
balance. Do not use any constructors. Use methods to initialize the class
members.
*/


#include <iostream>
using namespace std;

// Base class: Account
class Account {
protected:
    string name;
    int accNumber;
    string accType;
    double balance;

public:
    void initialize(string n, int accNo, string type, double bal) {
        name = n;
        accNumber = accNo;
        accType = type;
        balance = bal;
    }

    void deposit(double amount) {
        balance += amount;
        cout << "â‚¹" << amount << " deposited. New balance: â‚¹" << balance << endl;
    }

    void displayBalance() {
        cout << "\nAccount Holder: " << name;
        cout << "\nAccount Number: " << accNumber;
        cout << "\nAccount Type: " << accType;
        cout << "\nCurrent Balance: â‚¹" << balance << endl;
    }

    double getBalance() {
        return balance;
    }

    void updateBalance(double newBalance) {
        balance = newBalance;
    }
};

// Derived class: Savings Account
class SavAcct : public Account {
public:
    void computeInterest(double rate, int years) {
        double interest = balance * rate * years / 100;
        balance += interest;
        cout << "Interest of â‚¹" << interest << " added." << endl;
    }

    void withdraw(double amount) {
        if (amount > balance) {
            cout << "Insufficient funds!" << endl;
        } else {
            balance -= amount;
            cout << "â‚¹" << amount << " withdrawn. Remaining balance: â‚¹" << balance << endl;
        }
    }
};

// Derived class: Current Account
class CurrAcct : public Account {
private:
    const double minBalance = 1000.0;
    const double penalty = 100.0;

public:
    void withdraw(double amount) {
        if (amount > balance) {
            cout << "Insufficient funds!" << endl;
        } else {
            balance -= amount;
            cout << "â‚¹" << amount << " withdrawn. Remaining balance: â‚¹" << balance << endl;
            checkMinBalance();
        }
    }

    void checkMinBalance() {
        if (balance < minBalance) {
            cout << "Balance below minimum! â‚¹" << penalty << " penalty imposed." << endl;
            balance -= penalty;
        }
    }
};

// ðŸ’» Main Function
int main() {
    SavAcct sa;
    CurrAcct ca;

    // Initialize accounts
    sa.initialize("Pookie Girl", 1001, "Savings", 5000);
    ca.initialize("Sameer", 2002, "Current", 1200);

    // Operations on Savings Account
    cout << "\nðŸŒ¸ Savings Account Operations ðŸŒ¸\n";
    sa.deposit(1000);
    sa.computeInterest(5.0, 2); // 5% interest for 2 years
    sa.withdraw(2000);
    sa.displayBalance();

    // Operations on Current Account
    cout << "\nðŸ’¼ Current Account Operations ðŸ’¼\n";
    ca.deposit(500);
    ca.withdraw(1800); // Should impose penalty
    ca.displayBalance();

    return 0;
}
